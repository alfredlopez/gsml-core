# The configuration system allows for repeated properties. These properties are generally used when
# one needs a "stacked representation" of a value. Another use is for Chain of Responsibility pattern,
# like the BroadcastListener. In this case, the dependency injection would instantiate both classes and
# chain them in a stack. The DI *only* instantiates and chains them. It doesn't nothing more. The CoR
# classes are responsible for delegating or passing on information within the chain (see interface Chainable).
BroadcastListener=asanasoft.gsml.client.communication.listener.[Some implementation of a BroadcastListener]
BroadcastListener=asanasoft.gsml.client.communication.listener.[Some other implementation of a BroadcastListener]
EventBroadcaster=asanasoft.gsml.client.communication.broadcas.[Some implementation of a EventBroadcaster]
JwkProvider=asanasoft.gsml.client.token.jwt.impl.[Some implementation of a JwkProvider]
AccessToken=asanasoft.gsml.client.token.[Some implementation of a AccessToken]
IdentityToken=asanasoft.gsml.client.token.jwt.impl.JwtIdentityToken
RefreshToken=asanasoft.gsml.client.token.jwt.impl.JwtRefreshToken
TokenIssuer=asanasoft.gsml.server.[Some implementation of a TokenIssuer]
TokenManager=asanasoft.gsml.client.TokenManager
ValidatedAccessToken=asanasoft.gsml.client.token.[Some implementation of a ValidatedAccessToken]
ErrorObject=asanasoft.gsml.client.hooks.errors.impl.DefaultErrorObject